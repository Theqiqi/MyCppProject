on:
  push:
    branches: [ main ]
    tags:    [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: { os: [ubuntu-latest, windows-latest, macos-latest] }

    steps:
      - uses: actions/checkout@v2

      # [Install deps per-OS]
      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y cmake build-essential dpkg-dev
      - name: Install deps (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install cmake --installargs "ADD_CMAKE_TO_PATH=System" -y
          choco install visualstudio2019buildtools -y
      - name: Install deps (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake

      # build & test
      - name: Build
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
      - name: Test
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            .\build\Release\MyCppProject.exe
          else
            ./build/MyCppProject
          fi
        shell: bash

      # upload raw artifacts for diagnostics
      - uses: actions/upload-artifact@v3
        with:
          name: raw-binaries-${{ runner.os }}
          path: build/**

  release:
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.ref_name#'v' }}
    steps:
      - uses: actions/checkout@v2

      # re-build & install into dist
      - name: Install & Build into dist
        run: |
          cmake -S . -B build -DCMAKE_INSTALL_PREFIX=dist -DCMAKE_BUILD_TYPE=Release
          cmake --build build --target install --config Release

      - name: Package Debian
        run: |
          cat > dist/DEBIAN/control <<EOF
          Package: mycppproject
          Version: ${VERSION}
          Architecture: amd64
          Maintainer: You <you@example.com>
          Description: My C++ Project
          EOF
          dpkg-deb --build dist mycppproject_${VERSION}_amd64.deb

      - name: Zip macOS & Windows
        run: |
          zip -j dist-macos.zip dist/usr/local/bin/MyCppProject
          zip -j dist-windows.zip build/Release/MyCppProject.exe

      - name: Create GitHub Release & upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ env.VERSION }}
          files: |
            mycppproject_${VERSION}_amd64.deb
            dist-macos.zip
            dist-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
