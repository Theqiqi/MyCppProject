name: Build C++ Project

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # ✅ 仅在 `main` 分支且 `v*` 版本标签推送时触发
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    if: github.event_name == 'push' && github.ref_type == 'tag' && github.base_ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Install CMake + compiler
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install visualstudio2019buildtools -y

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake

      # Standard build (out-of-source)
      - name: Configure and build (all platforms)
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      # Run test: Linux & macOS
      - name: Run tests (Linux & macOS)
        if: runner.os != 'Windows'
        run: ./build/MyCppProject

      # Run test: Windows
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: .\build\Release\MyCppProject.exe
      
      # Step: Archive the executable (all platforms)
      - name: Package executable
        run: |
          mkdir -p dist
          if [ "$RUNNER_OS" == "Linux" ]; then
            cp ./build/MyCppProject ./dist/MyCppProject_Linux
          elif [ "$RUNNER_OS" == "macOS" ]; then
            cp ./build/MyCppProject ./dist/MyCppProject_macOS
          elif [ "$RUNNER_OS" == "Windows" ]; then
            cp .\build\Release\MyCppProject.exe .\dist\MyCppProject_Windows.exe
          fi
      - name: Compress artifacts
        if: runner.os != 'Windows'
        run: zip -j dist.zip dist/*
      - name: Compress artifacts (Windows)
        if: runner.os == 'Windows'
        run: powershell Compress-Archive -Path dist\* -DestinationPath dist.zip

      # Step: Upload to GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: github.ref_type == 'tag' && github.base_ref == 'refs/heads/main'
        with:
          tag_name: "${{ github.ref }}"
          name: "Auto Release Build ${{ github.run_number }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: dist.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
