name: Build C++ Project

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    if: startsWith(github.ref, 'refs/tags/v') && github.event.base_ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 安装依赖
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential dpkg-dev

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install visualstudio2019buildtools -y

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake

      # 编译项目
      - name: Build project
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
        shell: bash

      # 运行测试
      - name: Run tests (Linux & macOS)
        if: runner.os != 'Windows'
        run: ./build/MyCppProject

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: .\build\Release\MyCppProject.exe

      # 打包 Linux `.deb` 文件
      - name: Package for Linux (Debian)
        if: runner.os == 'Linux'
        run: |
          mkdir -p dist/DEBIAN
          echo "Package: mycppproject" > dist/DEBIAN/control
          echo "Version: 1.0.0" >> dist/DEBIAN/control
          echo "Architecture: amd64" >> dist/DEBIAN/control
          echo "Maintainer: Your Name <you@example.com>" >> dist/DEBIAN/control
          echo "Description: My C++ Project" >> dist/DEBIAN/control
          mkdir -p dist/usr/local/bin
          cp ./build/MyCppProject dist/usr/local/bin/
          dpkg-deb --build dist mycppproject_1.0.0_amd64.deb

      # 打包 Windows `.exe`
      - name: Package for Windows
        if: runner.os == 'Windows'
        run: |
          mkdir dist
          cp ./build/Release/MyCppProject.exe ./dist/MyCppProject_Windows.exe
        shell: bash

      # 打包 macOS 可执行文件
      - name: Package for macOS
        if: runner.os == 'macOS'
        run: |
          mkdir dist
          cp ./build/MyCppProject ./dist/MyCppProject_macOS
        shell: bash

      # 压缩所有发布文件
      - name: Compress artifacts
        run: zip -j dist.zip dist/*
        shell: bash

      # 发布 GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v') && github.event.base_ref == 'refs/heads/main'
        with:
          tag_name: "${{ github.ref }}"
          name: "Auto Release Build ${{ github.run_number }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: dist.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
